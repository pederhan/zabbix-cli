* Configure file logging for scripts as well???

## scripts

* Some sort of shared callback function between all scripts and the main CLI. This way we can pass in config etc, and have a common way of handling errors etc.

## API

Add some sort of `process_params` method that can be used to process params and add them to the ParamsType mapping, to reduce code duplication within each method.

## Args

* Show deprecation warning when user uses positional args instead of options.
* Hide positional args from help?
* Consistent hostname vs hostname_or_id arguments

## Bulk / -C mode

* Add timeout to commands when running in bulk mode in case command prompts for input.
* Populate cache when in bulk mode.

## Cache

* Add option to enable/disable cache.
  * Both in REPL mode and in bulk mode.
* Add command to clear cache.

## Commands

* Add command aliases: https://github.com/tiangolo/typer/issues/132
* Two options:
  * Add new name `show_host` -> `host show`, hide old name. (easy)
    * It's legal to have spaces in command names.
    * Need some sort of decorator like @app.old_name("show_host")
      * Registers the command with hidden=True
      * Adds `Old name: show_host` to the bottom of the help text.
      * This lets us traverse all the commands and create a mapping of old to new names, as well as providing it in the help text.

## Config

* Catch when users use deprecated names and warn them. Also warn when we load a .conf config.
* Add support for .fixed.conf files
* Add loading config from multiple sources. Each new config adds to the existing config and overrides values, like how it was in v2.

## Documentation

* Convert all docstrings to google docstring style.

## Exceptions

* Store error code and message in ZabbixAPIException, so that we can automatically add it to the error message when we write custom ZabbixAPIExceptions.
  * **VERY VERY IMPORTANT:** If we raise ZabbixAPIException from a ZabbixAPIException, we should be able to extract the data from the original exception (`__cause__`) and add it to whatever we are printing.


## Hosts
* Go through all `get_hosts()` calls. Make sure we only search for one term
* Show templates and proxies in `show_host` and `show_hosts`

## Logging

* Document that setting `log_file = ""` causes logs to be sent to stderr.
  * This is not recommended, but useful for real-time debugging.
  * Maybe toggle normal console messages when this is set?
* Either only use root logger OR add a logger for each module.
  * Currently we have a mix of both.

## No prompts in CI/headless

* Add a flag to disable all prompts. Useful for CI and headless environments.

## Rendering

* ~~calling `exit_err` in JSON mode should render the error as JSON to stdout with return_code "Error" like in V2.~~ DONE
* ~~Should we wrap API data in results or not?~~ YES?! We do now.
* Extract as_table out of the model classes and into a separate function that just takes a TableRenderableProto object.
  * This way we can control the style of the table in a single function instead of trying to modify the style in each model class OR by modifying the table object after it has been created.


## Legacy

* Assume legacy JSON format when loading from .conf file.
* Render some names as legacy names when using legacy JSON format.
  * E.g. `name` instead of `macro` for `show_host_usermacros`


## Tests

* Choice enum mappings contain all choices.
  * I.e. `InterfaceConnectionMode` & `InterfaceType`


--------------------

## Optimization

* Define result models inside commands
  * Faster startup time, but slower command execution
    * Startup: O(n) -> O(1)
    * Command execution: O(1) -> O(n/n)
    * Where n is the number of commands/result models.
* Reduce number of cross-imports
* Perform more cached lazy imports

## New command ideas

### Assign unproxied hosts to proxies

* Allow for pattern matching in host names.
  * E.g. `assign_host_to_proxy "proxy-prod01.example.com" "*.example.com"`

### Assign all hosts in host group to proxy

* Allow for pattern matching in host names.
  * E.g. `assign_hostgroup_to_proxy "proxy-prod01.example.com" "Siteadmin-iti-*"`
